/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c TrackPointInterface -p dbustrackpoint com.deepin.daemon.InputDevices.TrackPoint.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSTRACKPOINT_H_1458563800
#define DBUSTRACKPOINT_H_1458563800

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.InputDevice.TrackPoint
 */
class TrackPointInterface: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.daemon.InputDevice.TrackPoint")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys();
        foreach(const QString &prop, keys) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
 	            Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.InputDevice.TrackPoint"; }

public:
    TrackPointInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~TrackPointInterface();

    Q_PROPERTY(QString DeviceList READ deviceList NOTIFY DeviceListChanged)
    inline QString deviceList() const
    { return qvariant_cast< QString >(property("DeviceList")); }

    Q_PROPERTY(bool Exist READ exist NOTIFY ExistChanged)
    inline bool exist() const
    { return qvariant_cast< bool >(property("Exist")); }

    Q_PROPERTY(bool MiddleButtonEnabled READ middleButtonEnabled WRITE setMiddleButtonEnabled NOTIFY MiddleButtonEnabledChanged)
    inline bool middleButtonEnabled() const
    { return qvariant_cast< bool >(property("MiddleButtonEnabled")); }
    inline void setMiddleButtonEnabled(bool value)
    { setProperty("MiddleButtonEnabled", QVariant::fromValue(value)); }

    Q_PROPERTY(int MiddleButtonTimeout READ middleButtonTimeout WRITE setMiddleButtonTimeout NOTIFY MiddleButtonTimeoutChanged)
    inline int middleButtonTimeout() const
    { return qvariant_cast< int >(property("MiddleButtonTimeout")); }
    inline void setMiddleButtonTimeout(int value)
    { setProperty("MiddleButtonTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(double MotionAcceleration READ motionAcceleration WRITE setMotionAcceleration NOTIFY MotionAccelerationChanged)
    inline double motionAcceleration() const
    { return qvariant_cast< double >(property("MotionAcceleration")); }
    inline void setMotionAcceleration(double value)
    { setProperty("MotionAcceleration", QVariant::fromValue(value)); }

    Q_PROPERTY(double MotionScaling READ motionScaling WRITE setMotionScaling NOTIFY MotionScalingChanged)
    inline double motionScaling() const
    { return qvariant_cast< double >(property("MotionScaling")); }
    inline void setMotionScaling(double value)
    { setProperty("MotionScaling", QVariant::fromValue(value)); }

    Q_PROPERTY(double MotionThreshold READ motionThreshold WRITE setMotionThreshold NOTIFY MotionThresholdChanged)
    inline double motionThreshold() const
    { return qvariant_cast< double >(property("MotionThreshold")); }
    inline void setMotionThreshold(double value)
    { setProperty("MotionThreshold", QVariant::fromValue(value)); }

    Q_PROPERTY(bool WheelEmulation READ wheelEmulation WRITE setWheelEmulation NOTIFY WheelEmulationChanged)
    inline bool wheelEmulation() const
    { return qvariant_cast< bool >(property("WheelEmulation")); }
    inline void setWheelEmulation(bool value)
    { setProperty("WheelEmulation", QVariant::fromValue(value)); }

    Q_PROPERTY(int WheelEmulationButton READ wheelEmulationButton WRITE setWheelEmulationButton NOTIFY WheelEmulationButtonChanged)
    inline int wheelEmulationButton() const
    { return qvariant_cast< int >(property("WheelEmulationButton")); }
    inline void setWheelEmulationButton(int value)
    { setProperty("WheelEmulationButton", QVariant::fromValue(value)); }

    Q_PROPERTY(int WheelEmulationTimeout READ wheelEmulationTimeout WRITE setWheelEmulationTimeout NOTIFY WheelEmulationTimeoutChanged)
    inline int wheelEmulationTimeout() const
    { return qvariant_cast< int >(property("WheelEmulationTimeout")); }
    inline void setWheelEmulationTimeout(int value)
    { setProperty("WheelEmulationTimeout", QVariant::fromValue(value)); }

    Q_PROPERTY(bool WheelHorizScroll READ wheelHorizScroll WRITE setWheelHorizScroll NOTIFY WheelHorizScrollChanged)
    inline bool wheelHorizScroll() const
    { return qvariant_cast< bool >(property("WheelHorizScroll")); }
    inline void setWheelHorizScroll(bool value)
    { setProperty("WheelHorizScroll", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
// begin property changed signals
void DeviceListChanged();
void ExistChanged();
void MiddleButtonEnabledChanged();
void MiddleButtonTimeoutChanged();
void MotionAccelerationChanged();
void MotionScalingChanged();
void MotionThresholdChanged();
void WheelEmulationChanged();
void WheelEmulationButtonChanged();
void WheelEmulationTimeoutChanged();
void WheelHorizScrollChanged();
};

namespace com {
  namespace deepin {
    namespace daemon {
      namespace InputDevice {
        typedef ::TrackPointInterface TrackPoint;
      }
    }
  }
}
#endif

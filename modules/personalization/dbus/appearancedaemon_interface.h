/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -N -p appearancedaemon_interface.h:appearancedaemon_interface.cpp -c AppearanceDaemonInterface appearancedaemon.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef APPEARANCEDAEMON_INTERFACE_H
#define APPEARANCEDAEMON_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.deepin.daemon.Appearance
 */
class AppearanceDaemonInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Appearance"; }

public:
    AppearanceDaemonInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~AppearanceDaemonInterface();

    Q_PROPERTY(QString Background READ background WRITE setBackground)
    inline QString background() const
    { return qvariant_cast< QString >(property("Background")); }
    inline void setBackground(const QString &value)
    { setProperty("Background", QVariant::fromValue(value)); }

    Q_PROPERTY(QString CursorTheme READ cursorTheme WRITE setCursorTheme)
    inline QString cursorTheme() const
    { return qvariant_cast< QString >(property("CursorTheme")); }
    inline void setCursorTheme(const QString &value)
    { setProperty("CursorTheme", QVariant::fromValue(value)); }

    Q_PROPERTY(int FontSize READ fontSize WRITE setFontSize)
    inline int fontSize() const
    { return qvariant_cast< int >(property("FontSize")); }
    inline void setFontSize(int value)
    { setProperty("FontSize", QVariant::fromValue(value)); }

    Q_PROPERTY(QString GtkTheme READ gtkTheme WRITE setGtkTheme)
    inline QString gtkTheme() const
    { return qvariant_cast< QString >(property("GtkTheme")); }
    inline void setGtkTheme(const QString &value)
    { setProperty("GtkTheme", QVariant::fromValue(value)); }

    Q_PROPERTY(QString IconTheme READ iconTheme WRITE setIconTheme)
    inline QString iconTheme() const
    { return qvariant_cast< QString >(property("IconTheme")); }
    inline void setIconTheme(const QString &value)
    { setProperty("IconTheme", QVariant::fromValue(value)); }

    Q_PROPERTY(QString MonospaceFont READ monospaceFont WRITE setMonospaceFont)
    inline QString monospaceFont() const
    { return qvariant_cast< QString >(property("MonospaceFont")); }
    inline void setMonospaceFont(const QString &value)
    { setProperty("MonospaceFont", QVariant::fromValue(value)); }

    Q_PROPERTY(QString StandardFont READ standardFont WRITE setStandardFont)
    inline QString standardFont() const
    { return qvariant_cast< QString >(property("StandardFont")); }
    inline void setStandardFont(const QString &value)
    { setProperty("StandardFont", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Delete(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("Delete"), argumentList);
    }

    inline QDBusPendingReply<QString> List(const QString &in0)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0);
        return asyncCallWithArgumentList(QStringLiteral("List"), argumentList);
    }

    inline QDBusPendingReply<> Set(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("Set"), argumentList);
    }

    inline QDBusPendingReply<QString> Show(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("Show"), argumentList);
    }

    inline QDBusPendingReply<QString> Thumbnail(const QString &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QStringLiteral("Thumbnail"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Changed(const QString &in0, const QString &in1);
};

#endif

/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -c DBusPower -p dbuspower new.com.deepin.daemon.Power.xml
 *
 * qdbusxml2cpp is Copyright (C) 2015 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DBUSPOWER_H_1460422364
#define DBUSPOWER_H_1460422364

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

typedef QMap<QString, bool> BatteryInfoMap;
typedef QMap<QString, uint> BatteryStateMap;
typedef QMap<QString, double> BatteryPercentageMap;
Q_DECLARE_METATYPE(BatteryInfoMap)
Q_DECLARE_METATYPE(BatteryStateMap)
Q_DECLARE_METATYPE(BatteryPercentageMap)

struct BatteryItem {
QString batteryName;
bool batteryIsAccess;
double batteryPercentage;
uint batteryState;
};

#define BatteryStateUnkonwn             0
#define BatteryStateCharing             1
#define BatteryStateDischarging         2
#define BatteryStateEmpty               3
#define BatteryStateFullyCharged        4
#define BatteryStatePendingCharge       5
#define BatteryStatePendingDischarge    6

/*
 * Proxy class for interface com.deepin.daemon.Power
 */
class DBusPower: public QDBusAbstractInterface
{
    Q_OBJECT

    Q_SLOT void __propertyChanged__(const QDBusMessage& msg)
    {
        QList<QVariant> arguments = msg.arguments();
        if (3 != arguments.count())
            return;
        QString interfaceName = msg.arguments().at(0).toString();
        if (interfaceName !="com.deepin.daemon.Power")
            return;
        QVariantMap changedProps = qdbus_cast<QVariantMap>(arguments.at(1).value<QDBusArgument>());
        QStringList keys = changedProps.keys();
        foreach(const QString &prop, keys) {
        const QMetaObject* self = metaObject();
            for (int i=self->propertyOffset(); i < self->propertyCount(); ++i) {
                QMetaProperty p = self->property(i);
                if (p.name() == prop) {
                Q_EMIT p.notifySignal().invoke(this);
                }
            }
        }
   }
public:
    static inline const char *staticInterfaceName()
    { return "com.deepin.daemon.Power"; }

public:
    explicit DBusPower(QObject *parent = 0);

    ~DBusPower();

    Q_PROPERTY(BatteryInfoMap BatteryIsPresent READ batteryIsPresent NOTIFY BatteryIsPresentChanged)
    inline BatteryInfoMap batteryIsPresent() const
    { return qvariant_cast< BatteryInfoMap >(property("BatteryIsPresent")); }

    Q_PROPERTY(BatteryPercentageMap BatteryPercentage READ batteryPercentage NOTIFY BatteryPercentageChanged)
    inline BatteryPercentageMap batteryPercentage() const
    { return qvariant_cast< BatteryPercentageMap >(property("BatteryPercentage")); }

    Q_PROPERTY(int BatteryScreenBlackDelay READ batteryScreenBlackDelay WRITE setBatteryScreenBlackDelay NOTIFY BatteryScreenBlackDelayChanged)
    inline int batteryScreenBlackDelay() const
    { return qvariant_cast< int >(property("BatteryScreenBlackDelay")); }
    inline void setBatteryScreenBlackDelay(int value)
    { setProperty("BatteryScreenBlackDelay", QVariant::fromValue(value)); }

    Q_PROPERTY(int BatterySleepDelay READ batterySleepDelay WRITE setBatterySleepDelay NOTIFY BatterySleepDelayChanged)
    inline int batterySleepDelay() const
    { return qvariant_cast< int >(property("BatterySleepDelay")); }
    inline void setBatterySleepDelay(int value)
    { setProperty("BatterySleepDelay", QVariant::fromValue(value)); }

    Q_PROPERTY(BatteryStateMap BatteryState READ batteryState NOTIFY BatteryStateChanged)
    inline BatteryStateMap batteryState() const
    { return qvariant_cast< BatteryStateMap >(property("BatteryState")); }

    Q_PROPERTY(QString LidClosedAction READ lidClosedAction WRITE setLidClosedAction NOTIFY LidClosedActionChanged)
    inline QString lidClosedAction() const
    { return qvariant_cast< QString >(property("LidClosedAction")); }
    inline void setLidClosedAction(const QString &value)
    { setProperty("LidClosedAction", QVariant::fromValue(value)); }

    Q_PROPERTY(bool LidIsPresent READ lidIsPresent NOTIFY LidIsPresentChanged)
    inline bool lidIsPresent() const
    { return qvariant_cast< bool >(property("LidIsPresent")); }

    Q_PROPERTY(int LinePowerScreenBlackDelay READ linePowerScreenBlackDelay WRITE setLinePowerScreenBlackDelay NOTIFY LinePowerScreenBlackDelayChanged)
    inline int linePowerScreenBlackDelay() const
    { return qvariant_cast< int >(property("LinePowerScreenBlackDelay")); }
    inline void setLinePowerScreenBlackDelay(int value)
    { setProperty("LinePowerScreenBlackDelay", QVariant::fromValue(value)); }

    Q_PROPERTY(int LinePowerSleepDelay READ linePowerSleepDelay WRITE setLinePowerSleepDelay NOTIFY LinePowerSleepDelayChanged)
    inline int linePowerSleepDelay() const
    { return qvariant_cast< int >(property("LinePowerSleepDelay")); }
    inline void setLinePowerSleepDelay(int value)
    { setProperty("LinePowerSleepDelay", QVariant::fromValue(value)); }

    Q_PROPERTY(bool OnBattery READ onBattery NOTIFY OnBatteryChanged)
    inline bool onBattery() const
    { return qvariant_cast< bool >(property("OnBattery")); }

    Q_PROPERTY(QString PowerButtonAction READ powerButtonAction WRITE setPowerButtonAction NOTIFY PowerButtonActionChanged)
    inline QString powerButtonAction() const
    { return qvariant_cast< QString >(property("PowerButtonAction")); }
    inline void setPowerButtonAction(const QString &value)
    { setProperty("PowerButtonAction", QVariant::fromValue(value)); }

    Q_PROPERTY(bool ScreenBlackLock READ screenBlackLock WRITE setScreenBlackLock NOTIFY ScreenBlackLockChanged)
    inline bool screenBlackLock() const
    { return qvariant_cast< bool >(property("ScreenBlackLock")); }
    inline void setScreenBlackLock(bool value)
    { setProperty("ScreenBlackLock", QVariant::fromValue(value)); }

    Q_PROPERTY(bool SleepLock READ sleepLock WRITE setSleepLock NOTIFY SleepLockChanged)
    inline bool sleepLock() const
    { return qvariant_cast< bool >(property("SleepLock")); }
    inline void setSleepLock(bool value)
    { setProperty("SleepLock", QVariant::fromValue(value)); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("Reset"), argumentList);
    }

Q_SIGNALS: // SIGNALS
// begin property changed signals
void BatteryIsPresentChanged();
void BatteryPercentageChanged();
void BatteryScreenBlackDelayChanged();
void BatterySleepDelayChanged();
void BatteryStateChanged();
void LidClosedActionChanged();
void LidIsPresentChanged();
void LinePowerScreenBlackDelayChanged();
void LinePowerSleepDelayChanged();
void OnBatteryChanged();
void PowerButtonActionChanged();
void ScreenBlackLockChanged();
void SleepLockChanged();
};

namespace com {
  namespace deepin {
    namespace daemon {
      typedef ::DBusPower DBusPower;
    }
  }
}
#endif
